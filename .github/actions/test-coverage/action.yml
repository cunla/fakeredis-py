name: 'Run test with coverage'
description: 'Greet someone'
inputs:
  github-secret:
    description: 'GITHUB_TOKEN'
    required: true
  gist-secret:
    description: 'gist secret'
    required: true
runs:
  using: "composite"
  steps:
    - name: Test with coverage
      shell: bash
      run: |
        uv run ruff check
        uv run pytest -v --cov=fakeredis --cov-branch
        uv run coverage json
        echo "COVERAGE=$(jq '.totals.percent_covered_display|tonumber' coverage.json)" >> $GITHUB_ENV
    - name: Create coverage badge
      if: ${{ github.event_name == 'push' }}
      uses: schneegans/dynamic-badges-action@7142847813c746736c986b42dec98541e49a2cea
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: b756396efb895f0e34558c980f1ca0c7
        filename: fakeredis-py.json
        label: coverage
        message: ${{ env.COVERAGE }}%
        color: green
    - name: Coverage report
      if: ${{ github.event_name == 'pull_request' }}
      id: coverage_report
      shell: bash
      run: |
        echo 'REPORT<<EOF' >> $GITHUB_ENV
        uv run coverage report >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    - uses: mshick/add-pr-comment@dd126dd8c253650d181ad9538d8b4fa218fc31e8
      if: ${{ github.event_name == 'pull_request' }}
      with:
        message: |
          Coverage report:
          ```
          ${{ env.REPORT }}
          ```
        repo-token: ${{ inputs.github-secret }}
        allow-repeats: false
        message-id: coverage
